{"ast":null,"code":"import _slicedToArray from \"/Users/jason/Homework/clicky-game/clicky-game/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/jason/Homework/clicky-game/clicky-game/src/App.js\";\nimport React, { useState } from \"react\";\nimport Card from \"./components/Card\";\nimport Wrapper from \"./components/Wrapper\";\nimport Header from \"./components/Header\";\nimport cards from \"../src/cards.json\";\nimport \"./App.css\";\n\nfunction App() {\n  const _useState = useState(cards),\n        _useState2 = _slicedToArray(_useState, 2),\n        cardState = _useState2[0],\n        setCardState = _useState2[1];\n\n  const _useState3 = useState(0),\n        _useState4 = _slicedToArray(_useState3, 2),\n        scoreState = _useState4[0],\n        setScoreState = _useState4[1];\n\n  const _useState5 = useState(0),\n        _useState6 = _slicedToArray(_useState5, 2),\n        highScoreState = _useState6[0],\n        setHighScoreState = _useState6[1];\n\n  function clickCount(id) {\n    cardState.find((o, i) => {\n      if (o.id === id) {\n        if (cards[i].count === 0) {\n          cards[i].count = cards[i].count + 1;\n          setScoreState(scoreState + 1);\n          cardState.sort(() => Math.random() - 0.5);\n          return true;\n        } else {\n          if (scoreState > highScoreState) {\n            setHighScoreState(scoreState);\n          }\n\n          cardState.forEach(card => {\n            card.count = 0;\n          });\n          alert(\"Game Over :( \\nscore: \".concat(scoreState));\n          setScoreState(0);\n          return true;\n        }\n      }\n    });\n  }\n\n  return React.createElement(Wrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, React.createElement(Header, {\n    score: scoreState,\n    highscore: highScoreState,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, \"Clicky Game\"), cardState.map(card => React.createElement(Card, {\n    clickCount: clickCount,\n    id: card.id,\n    key: card.id,\n    image: card.image,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/jason/Homework/clicky-game/clicky-game/src/App.js"],"names":["React","useState","Card","Wrapper","Header","cards","App","cardState","setCardState","scoreState","setScoreState","highScoreState","setHighScoreState","clickCount","id","find","o","i","count","sort","Math","random","forEach","card","alert","map","image"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AACA,OAAO,WAAP;;AAIA,SAASC,GAAT,GAAgB;AAAA,oBAEkBL,QAAQ,CAACI,KAAD,CAF1B;AAAA;AAAA,QAETE,SAFS;AAAA,QAEEC,YAFF;;AAAA,qBAGoBP,QAAQ,CAAC,CAAD,CAH5B;AAAA;AAAA,QAGTQ,UAHS;AAAA,QAGGC,aAHH;;AAAA,qBAI4BT,QAAQ,CAAC,CAAD,CAJpC;AAAA;AAAA,QAITU,cAJS;AAAA,QAIOC,iBAJP;;AAMhB,WAASC,UAAT,CAAoBC,EAApB,EAAwB;AACpBP,IAAAA,SAAS,CAACQ,IAAV,CAAe,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACvB,UAAID,CAAC,CAACF,EAAF,KAASA,EAAb,EAAiB;AACf,YAAGT,KAAK,CAACY,CAAD,CAAL,CAASC,KAAT,KAAmB,CAAtB,EAAwB;AACtBb,UAAAA,KAAK,CAACY,CAAD,CAAL,CAASC,KAAT,GAAiBb,KAAK,CAACY,CAAD,CAAL,CAASC,KAAT,GAAiB,CAAlC;AACAR,UAAAA,aAAa,CAACD,UAAU,GAAG,CAAd,CAAb;AACAF,UAAAA,SAAS,CAACY,IAAV,CAAe,MAAMC,IAAI,CAACC,MAAL,KAAgB,GAArC;AACA,iBAAO,IAAP;AACD,SALD,MAKO;AACL,cAAIZ,UAAU,GAAGE,cAAjB,EAAiC;AAC/BC,YAAAA,iBAAiB,CAACH,UAAD,CAAjB;AACD;;AACDF,UAAAA,SAAS,CAACe,OAAV,CAAkBC,IAAI,IAAI;AACxBA,YAAAA,IAAI,CAACL,KAAL,GAAa,CAAb;AACD,WAFD;AAGAM,UAAAA,KAAK,iCAA0Bf,UAA1B,EAAL;AACAC,UAAAA,aAAa,CAAC,CAAD,CAAb;AACA,iBAAO,IAAP;AACD;AACF;AACF,KAnBD;AAoBD;;AAGC,SACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAED,UAAf;AAA2B,IAAA,SAAS,EAAEE,cAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAEGJ,SAAS,CAACkB,GAAV,CAAcF,IAAI,IACjB,oBAAC,IAAD;AACE,IAAA,UAAU,EAAEV,UADd;AAEE,IAAA,EAAE,EAAEU,IAAI,CAACT,EAFX;AAGE,IAAA,GAAG,EAAES,IAAI,CAACT,EAHZ;AAIE,IAAA,KAAK,EAAES,IAAI,CAACG,KAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CAFH,CADF;AAcH;;AAGD,eAAepB,GAAf","sourcesContent":["import React, { useState } from \"react\";\nimport Card from \"./components/Card\";\nimport Wrapper from \"./components/Wrapper\";\nimport Header from \"./components/Header\";\nimport cards from \"../src/cards.json\";\nimport \"./App.css\";\n\n\n\nfunction App () {\n\nconst [cardState, setCardState] = useState(cards) \nconst [scoreState, setScoreState] = useState(0)\nconst [highScoreState, setHighScoreState] = useState(0)\n\nfunction clickCount(id) {\n    cardState.find((o, i) => {\n      if (o.id === id) {\n        if(cards[i].count === 0){\n          cards[i].count = cards[i].count + 1;\n          setScoreState(scoreState + 1)\n          cardState.sort(() => Math.random() - 0.5)\n          return true; \n        } else {\n          if (scoreState > highScoreState) {\n            setHighScoreState(scoreState)\n          }\n          cardState.forEach(card => {\n            card.count = 0;\n          });\n          alert(`Game Over :( \\nscore: ${scoreState}`);\n          setScoreState(0)\n          return true;\n        }\n      }\n    });\n  }\n\n \n    return (\n      <Wrapper>\n        <Header score={scoreState} highscore={highScoreState}>Clicky Game</Header>\n        {cardState.map(card => (\n          <Card\n            clickCount={clickCount}\n            id={card.id}\n            key={card.id}\n            image={card.image}\n          /> \n        ))}\n      </Wrapper>\n    );\n  \n}\n\n\nexport default App;\n\n\n"]},"metadata":{},"sourceType":"module"}